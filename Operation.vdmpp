class Operation

types

public Result = <Allow> | <Deny>;
public Type = <Enter> | <Leave>;

instance variables

id: nat;
date: Date;
public cardUsed: Card;
parking: ParkingLot;
type: Type;
result: Result;

operations

public Operation: nat*Date*Card*ParkingLot*Type ==> Operation
	Operation(newId,newDate,newCard,newParking,newType) == (
		id := newId;
		date := newDate;
		cardUsed := newCard;
		parking := newParking;
		type := newType;
		
		if type = <Enter>
		then self.enter();
		
		if type = <Leave>
		then self.leave();
		
		
		return self;
	);
	
private enter: () ==> ()
	enter() == (
		result := <Deny>;
		if cardUsed not in set parking.getCardsIn() and not cardUsed.isInside()
		then (
		result := <Allow>;
		parking.carEntered(cardUsed);
		cardUsed.setInside();
		)
	) 
	pre if (expirationDate.year > date.year or --Check if it has not expired
		(expirationDate.year = date.year and expirationDate.month > date.month) or
		(expirationDate.year = date.year and expirationDate.month = date.month
			and expirationDate.day >= date.day))
			and not cardUsed.cancelled --Check if card is cancelled
			and not parking.maintenance; --Check if parking is on maintenance;

private leave: () ==> ()
	leave() == (
		result := <Deny>;
		if cardUsed in set parking.getCardsIn() and cardUsed.isInside()
		then (
		result := <Allow>;
		parking.carLeft(cardUsed);
		cardUsed.setOutside();
		)
	); --I assumed not to check same things as in "enter" because the car has to go out even
			-- even if it is cancelled or expired, I guess

end Operation