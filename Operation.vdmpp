class Operation

types

public Result = <Allow> | <Deny>;
public Type = <Enter> | <Leave>;

instance variables

id: nat;
date: Date;
cardUsed: Card;
parking: ParkingLot;
type: Type;
result: Result;

operations

public Operation: nat*Date*Card*ParkingLot*Type ==> Operation
	Operation(newId,newDate,newCard,newParking,newType) == (
		id := newId;
		date := newDate;
		cardUsed := newCard;
		parking := newParking;
		type := newType;
		
		if type = <Enter>
		then self.enter();
		
		if type = <Leave>
		then self.leave();
		
		
		return self;
	);
	
private enter: () ==> ()
	enter() == (
		result := <Deny>;
		if cardUsed not in set parking.getCardsIn() and not cardUsed.isInside()
		then (
		result := <Allow>;
		parking.carEntered(cardUsed);
		)
	);

private leave: () ==> ()
	leave() == (
		result := <Deny>;
		if cardUsed in set parking.getCardsIn() and cardUsed.isInside()
		then (
		result := <Allow>;
		parking.carLeft(cardUsed);
		)
	);

end Operation