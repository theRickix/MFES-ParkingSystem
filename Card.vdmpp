class Card

types
public String = seq of char;

instance variables
public id: nat;
public group: Group;
public username: String;
public plates: set of String;
public inside: bool;
public expirationDate: Date;
public cancelled: bool;
public ops: set of Operation;

operations
public Card: nat*Group*String*Date==> Card
	Card(newId,newGroup,newName,newDate) == (
		id := newId;
		group := newGroup;
		username := newName;
		plates := {};
		inside := false;
		expirationDate := newDate;
		cancelled := false;
		ops := {};
		return self;
	);
	
public getId: () ==> nat
	getId() == return self.id;
	
public getGroup: () ==> Group
	getGroup() == return self.group;
	
public getDate: () ==> Date
	getDate() == return self.expirationDate;
	
public getName: () ==> String
	getName() == return self.username;

public getPlates: () ==> set of String
	getPlates() == return self.plates;
	
public setInside: () ==> ()
	setInside() == inside := true;
	
public setOutside: () ==> ()
	setOutside() == inside := false;	
	
public isInside: () ==> bool
	isInside() == return self.inside;
	
public isCancelled: () ==> bool
	isCancelled() == return self.cancelled;
	
public cancel: () ==> ()
	cancel() == cancelled := true;
	
public reactivate: () ==> ()
	reactivate() == cancelled := false;
	
public isNotExpired: (Date) ==> bool
	isNotExpired(date) == (
		if expirationDate.year > date.year or
		(expirationDate.year = date.year and expirationDate.month > date.month) or
		(expirationDate.year = date.year and expirationDate.month = date.month
			and expirationDate.day >= date.day)
		then return true
		else return false;
	);
	
	
public addPlate: String ==> ()
	addPlate(newPlate) == (
		plates := plates union {newPlate}
	)
	pre newPlate not in set plates;

public removePlate: String ==> ()
	removePlate(plate) == (
		plates := plates \ {plate}
	)
	pre plate in set plates;
	
public addOperation: Operation ==> ()
	addOperation(op1) == (
		ops := ops union {op1}
	);
	
public getOperations: () ==> set of Operation
	getOperations() == return self.ops;
	
end Card