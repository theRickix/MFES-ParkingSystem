class Test is subclass of MyTestCase

types
public Type = <Enter> | <Leave>;
public Result = <Allow> | <Deny>;

operations
public Test: () ==> Test
	Test() == (
		return self;
		);
		
--Test initializing and populating MySystem.
public testMySystem: () ==> ()
	testMySystem() == (
		dcl MySystem: MySystem := new MySystem();
		dcl group: Group := MySystem.addGroup("Students");
		dcl park: ParkingLot := MySystem.addParking(30,group);
		dcl date1: Date := new Date(31,12,2017);
		dcl card1: Card := MySystem.addCard(group,"John Doe",date1);
		
		assertEqual("Students",group.getName());
		assertEqual("Students",park.getGroup().getName());
		assertEqual(30,park.getMaxLotation());
		assertEqual("John Doe",card1.getName());
		assertEqual(group,card1.getGroup());
		assertEqual(date1,card1.getDate());
		
		assertEqual(0,group.getId());
		assertEqual(0,park.getId());
		assertEqual(0,card1.getId());
	);
	
public testCard: () ==> ()
	testCard() == (
		dcl MySystem: MySystem := new MySystem();
		dcl group: Group := MySystem.addGroup("Students");
		dcl date1: Date := new Date(1,1,2015);
		dcl date2: Date := new Date(2,2,2017);
		dcl card1: Card := MySystem.addCard(group,"John Doe",date1);
		
		assertEqual(false,card1.isCancelled());
		assertEqual(false,card1.isInside());
		assertEqual(false,card1.isNotExpired(date2));
		
		
		MySystem.cancelCard(card1);
		assertEqual(true,card1.isCancelled());
		
		MySystem.reactivateCard(card1);
		assertEqual(false,card1.isCancelled());
		
		card1.addPlate("33-MM-22");
		assertEqual({"33-MM-22"},card1.getPlates());
		card1.removePlate("33-MM-22");
		assertEqual({},card1.getPlates());
		
	);
	
	
public testOperation: () ==> ()
	testOperation() == (
		dcl MySystem: MySystem := new MySystem();
		dcl group: Group := MySystem.addGroup("Students");
		dcl park1: ParkingLot := MySystem.addParking(30,group);
		dcl date1: Date := new Date(31,12,2017);
		dcl date2: Date := new Date(2,2,2017);
		dcl card1: Card := MySystem.addCard(group,"John Doe",date1);
		dcl op1: Operation;
		dcl op2: Operation;
		dcl op3: Operation;
		
		card1.addPlate("33-MM-22");
		op1 := MySystem.addOperation("33-MM-22",date2,card1,park1,<Enter>);
		op2 := MySystem.addOperation("33-MM-22",date2,card1,park1,<Enter>);
		
		assertEqual(<Allow>,op1.getResult());
		assertEqual(<Deny>,op2.getResult());
		assertEqual(29,MySystem.getParkingCurrLotation(park1));
		
		op3 := MySystem.addOperation("33-MM-22",date2,card1,park1,<Leave>);
		assertEqual(<Allow>,op1.getResult());
		assertEqual(30,park1.getCurrLotation());
		
		assertEqual({op1,op2,op3},MySystem.getCardOperations(card1));
		
	);
end Test