class System
types
public String = seq of char;
public Result = <Allow> | <Deny>;
public Type = <Enter> | <Leave>;

instance variables
idGroup: nat;
idCard: nat;
idParking: nat;
idOperation: nat;

groups: set of Group;
cards: set of Card;
parkings: set of ParkingLot;
ops: set of Operation;

operations
public System: () ==> System
	System() == (
		idGroup:=0;
		idCard:=0;
		idParking:=0;
		idOperation:=0;
		groups := {};
		cards := {};
		parkings := {};
		ops := {};
		return self;
	);
	
public addGroup: String ==> Group
	addGroup(newName) == (
		dcl newGroup: Group := new Group(idGroup,newName);
		groups := groups union {newGroup};
		idGroup := idGroup + 1;
		return newGroup;
	);
	
public addCard: Group*String*Date==> Card
	addCard(newGroup,newName,newDate) == (
		dcl newCard: Card := new Card(idCard,newGroup,newName,newDate);
		cards := cards union {newCard};
		idCard := idCard+1;
		return newCard;
	)
	pre newGroup in set groups;
	
public addParking: nat*Group ==> ParkingLot
	addParking(maxLotation,newGroup) == (
		dcl newParking: ParkingLot := new ParkingLot(idParking,maxLotation,newGroup);
		parkings := parkings union {newParking};
		idParking := idParking + 1;
		return newParking;
	)
	pre newGroup in set groups;
	
public addOperation: String*Date*Card*ParkingLot*Type ==> Operation
	addOperation(plate,currentDate,newCard,newParking,newType) == (
		dcl newOp: Operation := new Operation(idOperation,currentDate,newCard,newParking,newType);
		ops := ops union {newOp};
		return newOp;
	)
	pre newCard in set cards and newParking in set parkings and plate in set newCard.plates;
	
public cancelCard: Card ==> ()
	cancelCard(newCard) == (
		newCard.cancel()
	)
	pre newCard in set cards
	post newCard.cancelled = true;

public reactivateCard: Card ==> ()
	reactivateCard(newCard) == (
		newCard.reactivate()
	)
	pre newCard in set cards
	post newCard.cancelled = false;

public getParkingCurrLotation: ParkingLot ==> nat
	getParkingCurrLotation(parking) == (
		return parking.getCurrLotation();
	)
	pre parking in set parkings;
	
public getCardOperations: Card ==> set of Operation
	getCardOperations(newCard) == (return newCard.getOperations())
	pre newCard in set cards;

end System